{"pageProps":{"post":{"title":"Build a Modern User Interface with Chakra UI - Notes","date":"2020-08-05","slug":"build-a-modern-user-interface-with-chakra-ui-notes","content":"\nThis is the note I take as I watch this course \n[Build a Modern User Interface with Chakra UI - egghead.io](https://egghead.io/lessons/react-install-and-setup-chakra-ui-in-a-react-project)\n\nFor more information about Chakra UI, check out the [Chakra UI documentation](https://chakra-ui.com/docs).\n\n## Install and Setup Chakra UI in a React Project\n\nAdd dependencies to project.\n\n```sh\nnpm i @chakra-ui/react @emotion/react @emotion/styled framer-motion\n\n## or\n\nyarn add @chakra-ui/react @emotion/react @emotion/styled framer-motion\n```\n\nWrap the outer app in a `<ChakraProvider>` component.\n\n```jsx\nconst App = () => {\n  return (\n\t<ChakraProvider>\n\t  ...\n\t</ChakraProvider>\n  );\n}\n```\n\n## Build a Layout with the Container, Flex and VStack Component in Chakra UI\n\nImport the component\n\n```jsx\nimport { Container, Flex, VStack } from '@chakra-ui/react';\n```\n\nUse the component in jsx\n\n```jsx\nconst IndexPage = () => (\n\t<Container>\n\t\t...\n\t</Container>\n)\n```\n\nWe can also style the Chakra UI components with style props. In the background, the style props are converted into CSS rules.\n\nSome props also has custom values from Chakra that we can use e.g. `maxW=\"container.xl\"` or `h={5}`. \n\nSome props also has it's own shorthands like `maxW` instead of `maxWidth` and `h`/`w` instead of `height`/`width`.\n\nChakra also has `Stack` component, it has support to set spacing between elements, it has two derivatives, `HStack` and `VStack`.\n\n## Build a 2-Column Form with the SimpleGrid, FormControl, and Input Component in Chakra UI\n\nChakra has `SimpleGrid` component.\n\n```jsx\nimport { SimpleGrid } from '@chakra-ui/react';\n```\n\n`SimpleGrid` is a grid component that can be used to create a grid of elements. We can set the number of columns and the spacing between them.\n\n```jsx\n...\n\t<SimpleGrid columns={2} columnGap={3} rowGap={2} rows={3}>\n\t\t...\n\t</SimpleGrid>\n...\n```\n\n`GridItem` is a component that can be used to create a grid item inside the `SimpleGrid`. By setting the colSpan and rowSpan props, we can set the number of columns and rows that the item will take.\n\n```jsx\nimport { GridItem } from '@chakra-ui/react';\n\n...\n<GridItem colSpan={1}>\n\t...\n</GridItem>\n...\n```\n\nCreating Form in Chakra UI has several inputs. We can use them to create a form. Several of them are `Input`, `Select`, and `Checkbox`. We can wrap them inside `FormControl` component. Inside `FormControl`, We can use `FormLabel` to create a label for the input.\n\n## Create a Dark Mode Switcher in Chakra UI\n\nChakra UI has `useColorMode` and `useColorModeValue` React hook. It could be used to create a dark mode switcher.\nWe can use it with `onClick` props in button.\n\n```jsx\nimport { useColorMode, useColorModeValue } from '@chakra-ui/react';\n\n\t...\n\tconst { toggleColorMode } = useColorMode();\n\tconst bgColor = useColorModeValue('gray.50', 'whiteAlpha.50');\n\t...\n\t<VStack\n\t\tbg={bgColor}\n\t>\n\t\t<Button onClick={toggleColorMode}>\n\t\t\t\n\t\t</Button>\n\t</VStack>\n\t...\n```\n\n`useColorModeValue` used to decide the color on dark and light mode, with the first argument being the light mode color and the second argument being the dark mode color.\n\n## Implement Responsive Design in Chakra UI\n\nThere are few ways to implement responsive design in Chakra UI. \n\n1. Responsive array syntax.\n\n\t```jsx\n\tpy={[0, 10, 20]}\n\t```\n\n2. Responsive object syntax.\n\n\t```jsx\n\tdirection = {{ base: 'column-reverse', md: 'row' }}\n\t```\n\n3. Use `useBreakpointValue`.\n\n\t```jsx\n\timport { useBreakpointValue } from '@chakra-ui/react';\n\n\t...\n\tconst colSpan = useBreakpointValue({ base: 2, md: 1 });\n\t<GridItem colSpan={colSpan}>\n\t\t...\n\t</GridItem>\n\t...\n\n\t```\n\n## Define Custom Colors and Fonts in Chakra UI\n\nWe could define custom themes by make a separate file and import `extendTheme()` method.\n\n```jsx\nimport { extendTheme } from '@chakra-ui/react';\n\n\nconst theme = extendTheme({\n\t...\n});\n```\n\nand use it in the `<ChakraProvider>` component.\n\n```jsx\n<ChakraProvider theme={theme}>\n...\n</ChakraProvider>\n```\n\nWe can also provide fallback value to the theme.\n\n```jsx\nimport { extendTheme } from '@chakra-ui/react';\n\nconst theme = extendTheme({\n\tfonts: {\n\t\theading: `..., ${base.fonts?.heading}`,\n\t\tbody: `..., ${base.fonts?.body}`,\n\t},\n\tcolors: {\n\t\t...\n\t}\n});\n```\n\n## Use Theme Extensions in Chakra UI\n\nBy using theme extension, we can extend the theme.\n\nOne of the theme extension is `withDefaultColorScheme` and use it inside `extendTheme()`.\n\n```jsx\nimport { ..., withDefaultColorScheme } from '@chakra-ui/react';\n\nconst theme = extendTheme(\n\t{\n\t\t...\n\t},\n\twithDefaultColorScheme({\n\t\tcolorScheme: 'brand',\n\t\tcomponents: ['Checkbox', ...],\n\t})\n);\n```\n\nWe can also use another theme extensions like `withDefaultVariant`, etc.\n\nBy using theme extension, we can set custom style without manually set style to each components.\n\n## Override the Built-in Component's Styles in Chakra UI\n\nWe can override component props inside `extendTheme`.\n\n```jsx\nconst theme = extendTheme({\n\t...,\n\tcomponents: {\n\t\tInput: {\n\t\t\tvariants: {\n\t\t\t\tfilled: {\n\t\t\t\t\tfield: {\n\t\t\t\t\t\t_focus: {\n\t\t\t\t\t\t\tboderColor: 'brand.500'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tsizes: {\n\t\t\t\tmd: {\n\t\t\t\t\tfield: {\n\t\t\t\t\t\tborderRadius: 'none'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})\n```\n\nWe could also separate the style of the component into a separate variable.\n\n```jsx\nconst inputSelectStyles: {\n\t...\n}\n\nconst theme = extendTheme({\n\t...\n\tcomponents: {\n\t\tInput: { ...inputSelectStyles },\n\t\t...\n\t}\n})\n```\n\n## Create Custom Variants in Chakra UI\n\n\nWe can add custom variants like we override component props.\n\n```jsx\nconst theme = extendTheme({\n\t...\n\tcomponents: {\n\t\tInput: {\n\t\t\tvariants: {\n\t\t\t\tcustom: {\n\t\t\t\t\tborder: none\n\t\t\t\t},\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n})\n```\n\nWe can set light mode and dark mode color for the custom variant.\n\n```jsx\nconst theme = extendTheme({\n\t...\n\tcomponents: {\n\t\tInput: {\n\t\t\tvariants: {\n\t\t\t\tprimary: (props) => ({\n\t\t\t\t\tbackgroundColor: mode('gray.100', 'whiteAlpha.100')(props),\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n})\n```\n```\n\n```jsx\nconst theme = extendTheme({\n\t...\n\tcomponents: {\n\t\tInput: {\n\t\t\tvariants: {\n\t\t\t\tcustom: {\n\t\t\t\t\tcolor: 'gray.500',\n\t\t\t\t\tcolorMode: 'dark'\n\t\t\t\t},\n\t\t\t\t...\n\t\t\t}\n\t\t}\n\t}\n})\n```"}},"__N_SSG":true}