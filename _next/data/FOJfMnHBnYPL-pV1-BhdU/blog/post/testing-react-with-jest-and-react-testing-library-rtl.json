{"pageProps":{"post":{"title":"Testing React with Jest and React Testing Library (RTL)","date":"2020-08-12","slug":"testing-react-with-jest-and-react-testing-library-rtl","content":"\r\nThis is the note I take as I watch this course \r\n[Testing React with Jest and React Testing Library (RTL) - Udemy](https://www.udemy.com/course/react-testing-library/)\r\n\r\n## Introduction\r\n\r\nReact Testing Library (RTL) is a library that provides virtual DOM for React testing. Jest is a framework to run tests that is designed to be used in a CLI. In We write test using a testing function `test()` that takes two arguments: a description of the test and a callback function that contains the test code. \r\n\r\nThe testing processes are basically like using assertions. First we find the element on the app, then we can use assertions to check value of an element (`expect(...).toBe(...)`), and several other assertions are available. It throws error if the assertion fails.\r\n\r\nTesting library recommends finding elements in testing by using accesibility handles. There are several handles, especially `getByText()` (but better using `getByRole()`) and `getByTestId()`. This also encourages us to make the accesibility of the app is better.\r\n\r\n### Test-driven Development\r\n\r\nTest-driven development is a development method that creating test first before building the app. The code then will be implemented with specs from test file. The difference between TDD and BDD (Behavior-driven Development) is that TDD is focused on writing tests first, and BDD is focused on writing code first and involves a lot of people in different roles while the TDD is focused on writing tests first.\r\n\r\nType of tests:\r\n1. Unit tests: Test one small piece of functionality in isolation\r\n2. Integration tests: Test multiple units working together\r\n3. Functional tests: Test a functionality of how users interact in isolation (e.g. fill form and submit)\r\n4. Acceptance/End-to-end (E2E) tests: Test using actual browser and server\r\n\r\n## Examples\r\n\r\nGet button with text \"Change to blue\" and expect it to be red in initial\r\n\r\n```jsx\r\nconst colorButton = screen.getByRole('button', {name: 'Change to blue'});\r\nexpect(colorButton).toHaveStyle({ backgroundColor: 'red' });\r\n```\r\n\r\nExpect button to be red when clicked\r\n\r\n```jsx\r\nfireEvent.click(colorButton);\r\nexpect(colorButton).toHaveStyle({ backgroundColor: 'blue' });\r\n```\r\n\r\n### When to do unit test\r\nSome simple case could be covered by functional tests. But for complicated functions, unit test helps with:\r\n- Covering all possible edge cases\r\n- Determining what caused functional tests to fail\r\nIssue with functional test: High-level makes them resistant to refactors and makes them difficult to diagnose\r\n\r\n## ESLint and Prettier in Testing Library\r\n\r\nESLint: A popular linter for Javascripts. Linter is a tool that analyzes text and marks syntax that breaks rules. Linter analyzes code as written, not what happens when code is run. Linter also can adress format and style, for example, preferred assertion method.\r\n\r\nPrettier: A tool that formats code writing such as indents, spacing, and spaces around curly braces.\r\n\r\nESLint has plugin for testing library and Jest DOM.  Install it by\r\n\r\n```\r\nnpm install eslint-plugin-testing-library eslint-plugin-jest-dom\r\n```\r\n\r\nAt the root directory, create file `.eslintrc.json`.\r\n\r\n```json\r\n{\r\n\t\"plugins\": [\r\n\t\t\"testing-library\", \r\n\t\t\"jest-dom\"\r\n\t],\r\n\t\"extends\" [\r\n\t\t\"react-app\",\r\n\t\t\"react-app/jest\",\r\n\t\t\"plugin:testing-library/recommended\",\r\n\t\t\"plugin:testing-library/react\",\r\n\t\t\"plugin:jest-dom/recommended\"\r\n\t]\r\n}\r\n```\r\n\r\n### Configure ESLint in VSCode\r\n\r\nCreate new file in `.vscode/settings.json`\r\n\r\n```json\r\n{\r\n\t\"editor.codeActionsOnSave\": {\r\n\t\t\"source.fixAll.eslint\": true\r\n\t}\r\n}\r\n```\r\n\r\nAdd `.vscode` and `.eslintcache` to `.gitignore`.\r\n\r\nIf we working on VSCode, we can install ESLint plugin in VSCode. And then allow ESLint to run. If there's red underline mark on code, it means ESLint found error. If we check the error, we can see the error message and sometimes we can quick fix it."}},"__N_SSG":true}